/* Security configuration of the "traffic light" example. */
/* nk.basic._ is required for comparison operations support in policies, like != below */
use nk.basic._

/* Definition of the execute interface. */
execute: kl.core.Execute

/* Import the file with the declaration of basic security policy aliases. */
use nk.base._

use EDL Einit
use EDL kl.core.Core
use EDL kl.VfsRamFs
use EDL kl.VfsSdCardFs
use EDL kl.VfsNet
use EDL kl.rump.Dhcpcd
use EDL kl.drivers.SDCard
use EDL kl.drivers.RAMDisk
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO

use EDL traffic_light.ControlSystem
use EDL traffic_light.ModeChecker
use EDL traffic_light.HardwareDiagnostic
use EDL traffic_light.LightsGPIO
use EDL traffic_light.Exchange

execute {
    grant()
}

request {
    match dst = kl.core.Core {
        match src = Einit                                 { grant() }
        match src = traffic_light.ControlSystem           { grant() }
        match src = traffic_light.ModeChecker             { grant() }
        match src = traffic_light.HardwareDiagnostic      { grant() }
        match src = traffic_light.LightsGPIO              { grant() }
        match src = traffic_light.Exchange                { grant() }
        match src = kl.drivers.BSP                        { grant() }
        match src = kl.drivers.GPIO                       { grant() }
        match src = kl.rump.Dhcpcd                        { grant() }
        match src = kl.drivers.RAMDisk                    { grant() }
        match src = kl.VfsNet                             { grant() }
        match src = kl.VfsRamFs                           { grant() }
        match src = kl.VfsSdCardFs                        { grant() }
        match src = kl.drivers.SDCard                     { grant() }
        match src = kl.VfsRamFs                           { grant() }
        match src = kl.VfsRamFs                           { grant() }
    }

    match dst = Einit {
        match src = traffic_light.ControlSystem           { grant() }
        match src = traffic_light.ModeChecker             { grant() }
        match src = traffic_light.HardwareDiagnostic      { grant() }
        match src = traffic_light.LightsGPIO              { grant() }
        match src = traffic_light.Exchange                { grant() }
    }

    match src = kl.core.Core                              { grant() }

    match src = Einit                                     { grant() }

    match src = traffic_light.ControlSystem, dst = traffic_light.ModeChecker {
        grant()
    }

    match src = traffic_light.ControlSystem, dst = traffic_light.Exchange {
        grant()
    }

    match src = traffic_light.ModeChecker, dst = traffic_light.LightsGPIO endpoint = lightsGpio.mode method = FMode {
        assert(message.value != 0xffffffff)
        grant()
    }

    match src = traffic_light.LightsGPIO, dst = traffic_light.HardwareDiagnostic {
        grant()
    }

    match src = traffic_light.HardwareDiagnostic, dst = traffic_light.ControlSystem {
        grant()
    }

    match src = traffic_light.Exchange, dst = traffic_light.ControlSystem {
        grant()
    }

    match src = traffic_light.Exchange {
        match dst = kl.VfsSdCardFs                        { grant() }
        match dst = kl.VfsRamFs                           { grant() }
        match dst = kl.VfsNet                             { grant() }
    }

    match src = kl.rump.Dhcpcd, dst = kl.VfsRamFs         { grant() }
    match src = kl.rump.Dhcpcd, dst = kl.VfsNet           { grant() }
    match src = kl.VfsSdCardFs, dst = kl.drivers.SDCard   { grant() }
    match src = kl.VfsRamFs, dst = kl.drivers.RAMDisk     { grant() }
}

response {
    grant()
}

error {
    grant()
}

security {
    grant()
}
